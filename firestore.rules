rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() { return request.auth != null; }
    function userId() { return request.auth.uid; }
    function hasRole(r) { return isSignedIn() && exists(/databases/$(database)/documents/users/$(userId())) && get(/databases/$(database)/documents/users/$(userId())).data.role == r; }
    function inRoles(rs) { return isSignedIn() && rs.hasAny(get(/databases/$(database)/documents/users/$(userId())).data.role); }

    match /settings/{doc} {
      allow read: if true;
      allow write: if hasRole('founder');
    }

    match /users/{uid} {
      allow read: if isSignedIn();

      // Helper to detect ban changes in the incoming request
      function isSettingBan() {
        return (
          (request.resource.data.keys().hasAny(["banned"]) && request.resource.data.banned == true) ||
          (request.resource.data.keys().hasAny(["bannedUntil"]) && request.resource.data.bannedUntil > request.time)
        );
      }

      // Users can write their own profile, but they must not be able to set their own ban fields.
      allow create: if isSignedIn() && uid == userId();

      allow update: if isSignedIn() && (
        // Owner updating their own profile: allowed but cannot set ban fields on self
        (uid == userId() && !isSettingBan())
        // Moderators and founders can update other users (and themselves too) but cannot ban themselves
        || ((hasRole('moderator') || hasRole('founder')) && !(uid == userId() && isSettingBan()))
      );

      // Deletions only allowed to founders
      allow delete: if hasRole('founder');
    }

    match /products/{id} {
      allow read: if true;
      allow write: if isSignedIn();
    }

    match /orders/{id} {
      allow read: if isSignedIn() && (resource.data.buyerId == userId() || resource.data.sellerId == userId() || hasRole('moderator') || hasRole('founder'));
      allow write: if false; // server only
    }

    match /payments/{id} { allow read: if hasRole('founder'); allow write: if false; }
    match /commissions/{id} { allow read: if hasRole('founder'); allow write: if false; }

    match /tickets/{ticketId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && (hasRole('helper') || hasRole('moderator') || hasRole('founder') || request.resource.data.userId == userId());
      match /messages/{msgId} { allow read, create: if isSignedIn(); allow update, delete: if false; }
    }

    match /threads/{id}/{document=**} {
      allow read, write: if isSignedIn();
    }

    match /reviews/{id} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
  }
}
